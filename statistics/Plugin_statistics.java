
import ij.*;
import ij.plugin.filter.PlugInFilter;
import ij.process.*;
import ij.gui.*;
import java.awt.*;
import java.awt.event.*;
import java.util.*;
import java.lang.Math;

/**
 * This plugin implements the MouseListener and MouseMotionListener interfaces
 * and listens for mouse events generated by the current image.
 */
public class Plugin_statistics implements PlugInFilter, MouseListener, MouseMotionListener {

	/*
	 * plugin that allows you to mark an area of ​​the active image and writes the
	 * following statistics about that area to the console: Size of the area in
	 * pixels. Minimum pixel value. Maximum pixel value. Average. Standard
	 * deviation.
	 */

	ImagePlus img;
	ImageCanvas canvas;
	static Vector images = new Vector();

	int x1, y1, x2, y2; // to assign the values ​​in "x" and "y" from where the picture was marked with
						// the mouse in the image

	ImageProcessor ip;

	public int setup(String arg, ImagePlus img) {
		this.img = img;
		IJ.register(MouseListener.class);
		return DOES_ALL + NO_CHANGES;
	}

	public void run(ImageProcessor ip) {
		this.ip = ip;
		Integer id = new Integer(img.getID());
		if (images.contains(id)) {
			IJ.log("Already listening to this image");
			return;
		} else {
			ImageWindow win = img.getWindow();
			canvas = win.getCanvas();
			canvas.addMouseListener(this);
			canvas.addMouseMotionListener(this);
			images.addElement(id);
		}
	}

	public void mousePressed(MouseEvent e) {
		int x = e.getX();
		int y = e.getY();

		int offscreenX = canvas.offScreenX(x);
		int offscreenY = canvas.offScreenY(y);

		x1 = canvas.offScreenX(x);
		y1 = canvas.offScreenY(y);
	}

	public void mouseReleased(MouseEvent e) {
		int x = e.getX();
		int y = e.getY();

		int aux = 0, pixel_value = 0, min = 257, // value large enough that all are less
				max = -1, // value low enough for all to be greater than the
				sumaPixeles = 0;
		float promedio = 0, area = 0;
		double varianza = 0, desviacion = 0;

		int offscreenX = canvas.offScreenX(x);
		int offscreenY = canvas.offScreenY(y);
		x2 = canvas.offScreenX(x);
		y2 = canvas.offScreenY(y);

		// validate that either side works correctly when making calculations
		if (x1 > x2) {
			if (y1 < y2) {
				aux = x2;
				x2 = x1;
				x1 = aux;
			} else if (y1 > y2) {
				aux = x2;
				x2 = x1;
				x1 = aux;
				aux = y2;
				y2 = y1;
				y1 = aux;
			}
		} else if (x1 < x2 && y1 > y2) {
			aux = y2;
			y2 = y1;
			y1 = aux;
		}

		// get area
		area = (x2 - x1) * (y2 - y1);

		// we go pixel by pixel through the frame that was marked by the user
		for (int u = x1; u < x2; u++) {
			for (int v = y1; v < y2; v++) {
				pixel_value = ip.getPixel(u, v);
				sumaPixeles += pixel_value;
				if (pixel_value < min) {
					min = pixel_value;
				}
				if (pixel_value > max) {
					max = pixel_value;
				}
			}
		}

		// get average
		promedio = sumaPixeles / area;

		// get standard deviation
		for (int u = x1; u < x2; u++) {
			for (int v = y1; v < y2; v++) {
				varianza = varianza + Math.pow(pixel_value - promedio, 2f);
			}
		}
		desviacion = Math.sqrt(varianza / area - 1);

		// printing results
		IJ.log("Area = " + area);
		IJ.log("valor min = " + min);
		IJ.log("Valor max = " + max);
		IJ.log("Promedio = " + promedio);
		IJ.log("Desviacion estandar = " + desviacion);

	}

	public void mouseDragged(MouseEvent e) {
		int x = e.getX();
		int y = e.getY();

		int offscreenX = canvas.offScreenX(x);
		int offscreenY = canvas.offScreenY(y);

	}

	public static String modifiers(int flags) {
		String s = " [ ";
		if (flags == 0)
			return "";
		if ((flags & Event.SHIFT_MASK) != 0)
			s += "Shift ";
		if ((flags & Event.CTRL_MASK) != 0)
			s += "Control ";
		if ((flags & Event.META_MASK) != 0)
			s += "Meta (right button) ";
		if ((flags & Event.ALT_MASK) != 0)
			s += "Alt ";
		s += "]";
		if (s.equals(" [ ]"))
			s = " [no modifiers]";
		return s;
	}

	public void mouseExited(MouseEvent e) {
	}

	public void mouseClicked(MouseEvent e) {
	}

	public void mouseEntered(MouseEvent e) {
	}

	public void mouseMoved(MouseEvent e) {
	}

}
